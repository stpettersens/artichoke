!<arch>
artichoke.js/   1461248605  1000  1000  100664  3532      `
/*
  artichoke: Unix archiver (ar) implementation with Node.js.
  Copyright 2016 Sam Saint-Pettersen.

  Released under the MIT License.
*/

'use strict'

let USE_NATIVE = false

const fs = require('fs')
const conv = require('binstring')
let native = null

try {
  native = require('./build/Release/artichoke')
  USE_NATIVE = true
} catch (e) {
  USE_NATIVE = false
}

function getStats (filename) {
  let stats = fs.lstatSync(filename)
  let modified = Date.parse(stats['mtime']) / 1000
  let size = stats['size']

  return [modified, 1000, 1000, 100664, size]
}

function padData (n, data) {
  let padding = data
  for (let i = 0; i < (n - data.length); i++) {
    padding += String.fromCharCode(32)
  }
  return padding
}

function createEntry (filename) {
  let attribs = getStats(filename)
  return {
    file: filename,
    modified: attribs[0],
    owner: attribs[1],
    group: attribs[2],
    mode: attribs[3],
    size: attribs[4]
  }
}

function toBuffer (data) {
  return conv(data, {out: 'buffer'})
}

function writeArchive (archive, entries) {
  /**
   * COMMON AR FORMAT SPECIFICATION
   * (0) Global header
   * (a) Filename in ASCII [0:16]
   * (b) File modification timestamp (Decimal) [16:12]
   * (c) Owner ID (Decimal) [28:6]
   * (d) Group ID (Decimal) [34:6]
   * (e) File mode (Octal) [40:8]
   * (f) File size in bytes (Decimal) [48:10]
   * (g) Magic number ("0x60 0x0A") [58:2]
  */
  let ar = fs.createWriteStream(archive, {flags: 'w', encoding: 'binary'})
  let header = '!<arch>' + String.fromCharCode(0x0A) // (0)
  let data = []
  data.push(toBuffer(header))
  for (let i = 0; i < entries.length; i++) {
    let contents = fs.readFileSync(entries[i].file)
    data.push(toBuffer(padData(16, entries[i].file + '/'))) // (a)
    data.push(toBuffer(padData(12, entries[i].modified.toString()))) // (b)
    data.push(toBuffer(padData(6, entries[i].owner.toString()))) // (c)
    data.push(toBuffer(padData(6, entries[i].group.toString()))) // (d)
    data.push(toBuffer(padData(8, entries[i].mode.toString()))) // (e)
    data.push(toBuffer(padData(10, entries[i].size.toString()))) // (f)
    data.push(toBuffer(String.fromCharCode(0x60) + String.fromCharCode(0x0A))) // (g)
    data.push(contents)
    if (i > 0 && i < entries.length - 1) {
      data.push(toBuffer(String.fromCharCode(0x00)))
    }
  }
  ar.write(Buffer.concat(data))
  ar.close()
}

module.exports.createArchive = function (archive, files, options) {
  let entries = []
  if (Array.isArray(files)) {
    entries = files.map(function (f) {
      return createEntry(f)
    })
  } else {
    entries.push(createEntry(files))
  }

  if (options && options.native) {
    if (native === null) {
      USE_NATIVE = false
      console.warn('artichoke: Falling back to pure JS implementation ( native: ', USE_NATIVE, ')')
    }
  }

  if (options && !options.native) {
    USE_NATIVE = false
  }

  if (options && options.verbose) {
    console.info('Using native: ', USE_NATIVE)
    console.log(JSON.stringify(entries, null, 4))
  }

  if (USE_NATIVE) {
    let manifest = archive + '.entries'
    fs.writeFileSync(manifest, '')
    entries.map(function (entry) {
      fs.appendFileSync(manifest,
      `${entry.file}:${entry.modified}:${entry.owner}:` +
      `${entry.group}:${entry.mode}:${entry.size}\n`)
    })
    native.write_archive(archive, manifest)
  } else {
    writeArchive(archive, entries)
  }
}
artichoke.test.js/1461280104  1000  1000  100664  1718      `
/*
  Test artichoke.
*/

/* global describe it */
'use strict'

const artichoke = require('./artichoke')
const assert = require('chai').assert
const fs = require('fs')
const _exec = require('child_process').exec

let archives = ['artichoke_na.ar', 'artichoke_js.ar']
let sources = ['artichoke.js', 'artichoke.test.js']

describe('Test artichoke:', function () {
  it('Test code conforms to JS Standard Style (http://standardjs.com).', function (done) {
    _exec(`standard ${sources.join(' ')}`, function (err, stdout, stderr) {
      let passed = true
      if (err || stderr.length > 0) {
        console.log('\n' + stderr)
        console.log(stdout)
        passed = false
      }
      assert.equal(passed, true)
      done()
    })
  })

  it('Should create archive using native implementation.', function (done) {
    artichoke.createArchive(archives[0], sources, {native: true, verbose: true})
    if (!fs.existsSync(archives[0])) {
      throw Error
    }
    done()
  })

  it('Should create archive using pure JS implementation.', function (done) {
    artichoke.createArchive(archives[1], sources, {native: false, verbose: true})
    if (!fs.existsSync(archives[1])) {
      throw Error
    }
    done()
  })

  it('Archives created by native and pure JS implementations should be equal.', function (done) {
    let stats = []
    archives.map(function (archive) {
      fs.lstat(archive, function (err, stat) {
        if (err) {
          throw Error
        }
        stats.push(stat.size)
        if (stats.length === 2) {
          console.log(stats)
          assert.equal(stats[0], stats[1])
        }
      })
    })
    done()
  })
})
